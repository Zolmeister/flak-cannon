(function() {
  var ConversionState, ConversionStore, ExperimentState, ExperimentStore, QueryBuilder, QueryView, RecoilController, RecoilView, ResultStore, ShowState, SparkLine;

  SparkLine = function(data) {
    var sparkline;
    sparkline = function($el, isInit) {
      var graph, palette;
      if (isInit) {
        return;
      }
      palette = new Rickshaw.Color.Palette();
      graph = new Rickshaw.Graph({
        element: $el,
        width: 100,
        height: 50,
        renderer: 'line',
        series: [
          {
            data: _.map(data, function(datum, i) {
              return {
                x: i,
                y: datum.count
              };
            }),
            color: palette.color()
          }
        ]
      });
      return graph.render();
    };
    return m('div.sparkline', {
      config: sparkline
    });
  };

  ResultStore = (function() {
    var data;
    data = m.request({
      method: 'GET',
      url: '/api/experiments/signupText/results?\nfrom=1/1/14&to=1/30/14&split=Platform,Browser&conversion=signUp'
    });
    return {
      getAll: function() {
        return data;
      },
      query: function(q) {
        q = _.defaults(q, {
          experiment: '',
          start: '',
          end: '',
          splits: '',
          conversion: ''
        });
        return m.request({
          method: 'GET',
          url: "/api/experiments/" + q.experiment + "/results\n?from=" + (moment(q.start).format('L')) + "\n&to=" + (moment(q.end).format('L')) + "\n&split=" + q.splits + "\n&conversion=" + q.conversion
        }).then(data);
      }
    };
  })();

  QueryBuilder = function(queryHandler) {
    var conversion, end, experiment, query, splits, start;
    experiment = m.prop('signupText');
    start = m.prop(moment().subtract('days', 14).format('L').toString());
    end = m.prop(moment().format('L').toString());
    splits = m.prop('');
    conversion = m.prop('signUp');
    query = function() {
      return queryHandler({
        experiment: experiment(),
        start: start(),
        end: end(),
        splits: splits(),
        conversion: conversion()
      });
    };
    return function() {
      return m('div', [
        m('input', {
          value: experiment(),
          placeholder: 'experiment',
          onchange: m.withAttr('value', experiment)
        }), m('input', {
          value: start(),
          placeholder: 'start',
          onchange: m.withAttr('value', start)
        }), m('input', {
          value: end(),
          placeholder: 'end',
          onchange: m.withAttr('value', end)
        }), m('input', {
          value: splits(),
          placeholder: 'splits (, separated)',
          onchange: m.withAttr('value', splits)
        }), m('input', {
          value: conversion(),
          placeholder: 'conversion',
          onchange: m.withAttr('value', conversion)
        }), m('button', {
          onclick: query
        }, 'go')
      ]);
    };
  };

  ExperimentStore = (function() {
    var data;
    data = m.request({
      method: 'GET',
      url: '/api/experiments'
    });
    return {
      getAll: function() {
        return data;
      }
    };
  })();

  ConversionStore = (function() {
    var data;
    data = m.request({
      method: 'GET',
      url: '/api/conversions/uniq'
    });
    return {
      getAll: function() {
        return data;
      }
    };
  })();

  ExperimentState = function(experiments) {
    return m('ul', experiments.map(function(experiment) {
      return m('li', [
        experiment.name, m('ul', experiment.values.map(function(val) {
          return m('li', val);
        }))
      ]);
    }));
  };

  ConversionState = function(conversions) {
    return m('ul', conversions.map(function(conversion) {
      return m('li', conversion.name);
    }));
  };

  ShowState = function(experiments, conversions) {
    return ['Experiments', ExperimentState(experiments), 'Conversions', ConversionState(conversions)];
  };

  RecoilController = function() {
    return {
      results: ResultStore.getAll(),
      experiments: ExperimentStore.getAll(),
      conversions: ConversionStore.getAll()
    };
  };

  QueryView = QueryBuilder(ResultStore.query);

  RecoilView = function(ctrl) {
    var titles;
    titles = ['test', 'sparkline'].concat(ctrl.results()[0] ? _.keys(ctrl.results()[0].splits) : void 0).concat(['conversions']);
    return [
      ShowState(ctrl.experiments(), ctrl.conversions()), m('br'), QueryView(), m('br'), m('table', titles.map(m.bind(m, 'th')).concat(_.map(_.values(ctrl.results()), function(result) {
        return m('tr', [m('td', result.test), m('td', [SparkLine(result.data)])].concat(_.map(_.values(result.splits), m.bind(m, 'td'))).concat([
          m('td', _.reduce(result.data, function(sum, datum) {
            return sum + datum.count;
          }, 0))
        ]));
      })))
    ];
  };

  m.module(document.getElementById('recoil'), {
    controller: RecoilController,
    view: RecoilView
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,