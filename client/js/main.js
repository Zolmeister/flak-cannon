(function() {
  var ConversionState, ConversionStore, ExperimentState, ExperimentStore, QueryBuilder, QueryView, RecoilController, RecoilView, ResultStore, ShowState, SparkLine, isPSignificant, nMinusOneChiSquare, pFromZ;

  SparkLine = function(data) {
    var sparkline;
    sparkline = function($el, isInit) {
      var graph, palette;
      if (isInit) {
        return;
      }
      palette = new Rickshaw.Color.Palette();
      graph = new Rickshaw.Graph({
        element: $el,
        width: 100,
        height: 50,
        renderer: 'line',
        series: [
          {
            data: _.map(data, function(datum, i) {
              return {
                x: i,
                y: datum.count
              };
            }),
            color: palette.color()
          }
        ]
      });
      return graph.render();
    };
    return m('div.sparkline', {
      config: sparkline
    });
  };

  nMinusOneChiSquare = function(aConversions, aTotal, bConversions, bTotal) {
    var N, a, b, c, chi2, d, m, n, r, s, z;
    a = aConversions;
    b = aTotal - aConversions;
    c = bConversions;
    d = bConversions - bTotal;
    r = a + c;
    s = b + d;
    m = a + b;
    n = c + d;
    N = m + n + r + s;
    chi2 = Math.pow(a * d - b * c, 2) * (N - 1) / (m * n * r * s);
    z = Math.sqrt(Math.abs(chi2));
    return pFromZ(z);
  };

  pFromZ = function(z) {
    var Z_MAX, w, x, y;
    Z_MAX = 6.0;
    if (z === 0.0) {
      x = 0.0;
    } else {
      y = 0.5 * Math.abs(z);
      if (y > (Z_MAX * 0.5)) {
        x = 1.0;
      } else if (y < 1.0) {
        w = y * y;
        x = ((((((((0.000124818987 * w - 0.001075204047) * w + 0.005198775019) * w - 0.019198292004) * w + 0.059054035642) * w - 0.151968751364) * w + 0.319152932694) * w - 0.531923007300) * w + 0.797884560593) * y * 2.0;
      } else {
        y -= 2.0;
        x = (((((((((((((-0.000045255659 * y + 0.000152529290) * y - 0.000019538132) * y - 0.000676904986) * y + 0.001390604284) * y - 0.000794620820) * y - 0.002034254874) * y + 0.006549791214) * y - 0.010557625006) * y + 0.011630447319) * y - 0.009279453341) * y + 0.005353579108) * y - 0.002141268741) * y + 0.000535310849) * y + 0.999936657524;
      }
    }
    if (z > 0.0) {
      return (x + 1.0) * 0.5;
    } else {
      return (1.0 - x) * 0.5;
    }
  };

  isPSignificant = function(p) {
    return p > 0.05;
  };

  ResultStore = (function() {
    var data, transform;
    transform = function(data) {
      var control;
      data = data.map(function(result) {
        result.totalConversions = _.reduce(result.data, function(sum, datum) {
          return sum + datum.count;
        }, 0);
        return result;
      });
      control = data[0];
      control.p = 0;
      control.percentDelta = 0;
      data = data.slice(1).map(function(result) {
        var aConversions, aPercent, aTotal, bConversions, bPercent, bTotal, p, percentDelta;
        aConversions = result.totalConversions;
        aTotal = result.participantCount;
        bConversions = control.totalConversions;
        bTotal = control.participantCount;
        aPercent = aConversions / aTotal;
        bPercent = bConversions / bTotal;
        percentDelta = aPercent - bPercent;
        p = nMinusOneChiSquare(aConversions, aTotal, bConversions, bTotal);
        result.p = p;
        result.percentDelta = percentDelta;
        return result;
      });
      data = [control].concat(_.sortBy(data, 'percentDelta').reverse());
      return data;
    };
    data = m.request({
      method: 'GET',
      url: '/api/fake/experiments/signupText/results?\nfrom=1/1/14&to=1/30/14&split=Platform,Browser&conversion=signUp'
    });
    return {
      getAll: function() {
        return data.then(transform);
      },
      query: function(q) {
        q = _.defaults(q, {
          experiment: '',
          start: '',
          end: '',
          splits: '',
          conversion: ''
        });
        return m.request({
          method: 'GET',
          url: "/api/fake/experiments/" + q.experiment + "/results\n?from=" + (moment(q.start).format('L')) + "\n&to=" + (moment(q.end).format('L')) + "\n&split=" + q.splits + "\n&conversion=" + q.conversion
        }).then(transform).then(data);
      }
    };
  })();

  QueryBuilder = function(queryHandler) {
    var conversion, end, experiment, query, splits, start;
    experiment = m.prop('signupText');
    start = m.prop(moment().subtract('days', 14).format('L').toString());
    end = m.prop(moment().format('L').toString());
    splits = m.prop('');
    conversion = m.prop('signUp');
    query = function() {
      return queryHandler({
        experiment: experiment(),
        start: start(),
        end: end(),
        splits: splits(),
        conversion: conversion()
      });
    };
    return function() {
      return m('div', [
        m('input', {
          value: experiment(),
          placeholder: 'experiment',
          onchange: m.withAttr('value', experiment)
        }), m('input', {
          value: start(),
          placeholder: 'start',
          onchange: m.withAttr('value', start)
        }), m('input', {
          value: end(),
          placeholder: 'end',
          onchange: m.withAttr('value', end)
        }), m('input', {
          value: splits(),
          placeholder: 'splits (, separated)',
          onchange: m.withAttr('value', splits)
        }), m('input', {
          value: conversion(),
          placeholder: 'conversion',
          onchange: m.withAttr('value', conversion)
        }), m('button', {
          onclick: query
        }, 'go')
      ]);
    };
  };

  ExperimentStore = (function() {
    var data;
    data = m.request({
      method: 'GET',
      url: '/api/fake/experiments'
    });
    return {
      getAll: function() {
        return data;
      }
    };
  })();

  ConversionStore = (function() {
    var data;
    data = m.request({
      method: 'GET',
      url: '/api/fake/conversions/uniq'
    });
    return {
      getAll: function() {
        return data;
      }
    };
  })();

  ExperimentState = function(experiments) {
    return m('ul', experiments.map(function(experiment) {
      return m('li', [
        experiment.name, m('ul', experiment.values.map(function(val) {
          return m('li', val);
        }))
      ]);
    }));
  };

  ConversionState = function(conversions) {
    return m('ul', conversions.map(function(conversion) {
      return m('li', conversion.name);
    }));
  };

  ShowState = function(experiments, conversions) {
    return ['Experiments', ExperimentState(experiments), 'Conversions', ConversionState(conversions)];
  };

  RecoilController = function() {
    return {
      results: ResultStore.getAll(),
      experiments: ExperimentStore.getAll(),
      conversions: ConversionStore.getAll()
    };
  };

  QueryView = QueryBuilder(ResultStore.query);

  RecoilView = function(ctrl) {
    var percent, titles;
    titles = ['test', 'sparkline'].concat(ctrl.results()[0] ? _.keys(ctrl.results()[0].splits) : void 0).concat(['conversions', 'participants', 'percent', 'p', 'delta']);
    percent = function(n) {
      return (n * 100).toFixed(2) + '%';
    };
    return [
      ShowState(ctrl.experiments(), ctrl.conversions()), m('br'), QueryView(), m('br'), m('table', titles.map(m.bind(m, 'th')).concat(_.map(_.values(ctrl.results()), function(result) {
        var color;
        color = result.percentDelta > 0 ? 'green' : result.percentDelta === 0 ? 'black' : 'red';
        return m('tr', [m('td', result.test), m('td', [SparkLine(result.data)])].concat(_.map(_.values(result.splits), m.bind(m, 'td'))).concat([
          m('td', result.totalConversions), m('td', result.participantCount), m('td', percent(result.totalConversions / result.participantCount)), m('td', result.p), m('td', {
            style: {
              color: color
            }
          }, percent(result.percentDelta))
        ]));
      })))
    ];
  };

  m.module(document.getElementById('recoil'), {
    controller: RecoilController,
    view: RecoilView
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,